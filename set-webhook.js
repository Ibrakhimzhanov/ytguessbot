/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook –¥–ª—è Telegram –±–æ—Ç–∞
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node set-webhook.js <webhook_url>
 * 
 * –ü—Ä–∏–º–µ—Ä:
 * node set-webhook.js https://ytacademy.uz/api/bot
 */

const https = require('https')
const dotenv = require('dotenv')

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

const BOT_TOKEN = process.env.BOT_TOKEN
const WEBHOOK_URL = process.argv[2]

if (!BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ')
  process.exit(1)
}

if (!WEBHOOK_URL) {
  console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ URL –¥–ª—è webhook')
  console.log('üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node set-webhook.js <webhook_url>')
  console.log('üìù –ü—Ä–∏–º–µ—Ä: node set-webhook.js https://ytacademy.uz/api/bot')
  process.exit(1)
}

console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...')
console.log(`üìç URL: ${WEBHOOK_URL}`)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram
function telegramRequest(method, params = {}) {
  return new Promise((resolve, reject) => {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/${method}`
    const data = JSON.stringify(params)
    
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length
      }
    }
    
    const req = https.request(url, options, (res) => {
      let body = ''
      res.on('data', chunk => body += chunk)
      res.on('end', () => {
        try {
          const response = JSON.parse(body)
          resolve(response)
        } catch (error) {
          reject(error)
        }
      })
    })
    
    req.on('error', reject)
    req.write(data)
    req.end()
  })
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook (–µ—Å–ª–∏ –µ—Å—Ç—å)
    console.log('\nüì§ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook...')
    const deleteResult = await telegramRequest('deleteWebhook')
    
    if (deleteResult.ok) {
      console.log('‚úÖ –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω')
    } else {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook:', deleteResult.description)
    }
    
    // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    console.log('\nüì§ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ webhook...')
    const setResult = await telegramRequest('setWebhook', {
      url: WEBHOOK_URL,
      allowed_updates: ['message', 'callback_query', 'inline_query']
    })
    
    if (setResult.ok) {
      console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', setResult.description)
      process.exit(1)
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    console.log('\nüì§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook...')
    const infoResult = await telegramRequest('getWebhookInfo')
    
    if (infoResult.ok) {
      const info = infoResult.result
      console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:')
      console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')
      console.log(`URL: ${info.url}`)
      console.log(`–û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${info.pending_update_count}`)
      console.log(`–ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${info.max_connections || 40}`)
      
      if (info.last_error_date) {
        const errorDate = new Date(info.last_error_date * 1000)
        console.log(`\n‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${errorDate.toLocaleString()}`)
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${info.last_error_message}`)
      } else {
        console.log(`\n‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ`)
      }
      
      if (info.allowed_updates) {
        console.log(`\n–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${info.allowed_updates.join(', ')}`)
      }
      console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')
    }
    
    console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!')
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫
main()
