import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { bot } from '@/lib/telegram'

export async function POST(req: NextRequest) {
  try {
    const { receiptId, userId, orderNumber, success } = await req.json()

    console.log('üîµ Mock payment callback:', { receiptId, userId, orderNumber, success })

    if (!receiptId || !userId || !orderNumber) {
      return NextResponse.json({
        success: false,
        error: 'Missing required parameters'
      }, { status: 400 })
    }

    // –ù–∞–π—Ç–∏ –ø–ª–∞—Ç–µ–∂ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
    const payment = await prisma.payment.findFirst({
      where: { orderNumber: parseInt(orderNumber) },
      include: { user: true }
    })

    if (!payment) {
      return NextResponse.json({
        success: false,
        error: 'Payment not found'
      }, { status: 404 })
    }

    if (success) {
      // –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
      const now = new Date()
      await prisma.payment.update({
        where: { id: payment.id },
        data: {
          status: 'PAID',
          paymeId: receiptId,
          completedAt: now
        }
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.update({
        where: { id: payment.userId },
        data: { isPaid: true }
      })

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
      try {
        await bot.telegram.sendMessage(
          payment.user.telegramId.toString(),
          `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n` +
          `‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n` +
          `üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${payment.orderNumber}\n` +
          `üí∞ –°—É–º–º–∞: ${(payment.amount / 100).toLocaleString()} —Å—É–º\n\n` +
          `üìö –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /mycourse –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É—Ä—Å–∞.\n\n` +
          `üéì –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!`
        )
      } catch (error) {
        console.error('Failed to notify user:', error)
      }

      console.log('‚úÖ Mock payment completed successfully')
      return NextResponse.json({ success: true, status: 'paid' })
      
    } else {
      // –û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã
      await prisma.payment.update({
        where: { id: payment.id },
        data: {
          status: 'CANCELLED',
          completedAt: new Date()
        }
      })

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await bot.telegram.sendMessage(
          payment.user.telegramId.toString(),
          `‚ùå –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n` +
          `üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${payment.orderNumber}\n\n` +
          `–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /buy`
        )
      } catch (error) {
        console.error('Failed to notify user:', error)
      }

      console.log('‚ùå Mock payment cancelled')
      return NextResponse.json({ success: true, status: 'cancelled' })
    }

  } catch (error) {
    console.error('‚ùå Mock payment error:', error)
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
