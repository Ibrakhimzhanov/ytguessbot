import dotenv from 'dotenv'
dotenv.config()

import { bot, BotContext } from './telegram'
import { prisma } from './prisma'
import { Markup } from 'telegraf'
import { generatePaymeCheckoutUrl } from './payme/payme-utils'
import { hasAdminAccess, getRoleText } from './admin/roles'
import {
  showAdminPanel,
  handleExportXLSX,
  handleLotteryControl,
  handleLotteryStart,
  handleLotteryStop,
  handleSelectWinner,
  handleLotteryHistory,
  handleCheckUserId,
  handleGenerateRandomReceipt
} from './admin/admin-handlers'

const COURSE_PRICE = parseInt(process.env.COURSE_PRICE || '250000000') // —Ü–µ–Ω–∞ –≤ —Ç–∏–π–∏–Ω–∞—Ö (2,500,000 —Å—É–º)
const PAYME_MERCHANT_ID = process.env.PAYME_X_AUTH?.split(':')[0] || ''
const IS_TEST_MODE = process.env.NODE_ENV !== 'production'

// Debug logging
console.log('üí∞ COURSE_PRICE:', COURSE_PRICE, '—Ç–∏–π–∏–Ω–æ–≤ =', (COURSE_PRICE / 100).toLocaleString(), '—Å—É–º')
console.log('üè™ PAYME_MERCHANT_ID:', PAYME_MERCHANT_ID)
console.log('üß™ IS_TEST_MODE:', IS_TEST_MODE)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.command('buy', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  if (!telegramId) return

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—á–µ–Ω –ª–∏ —É–∂–µ –∫—É—Ä—Å
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(telegramId) }
    })

    if (user?.isPaid) {
      await ctx.reply(
        '‚úÖ –í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –∫—É—Ä—Å!\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /mycourse –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.'
      )
      return
    }

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Payme', 'pay_payme')],
      [Markup.button.callback('üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º', 'contact_admin')]
    ])

    await ctx.reply(
      `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞: ${(COURSE_PRICE / 100).toLocaleString()} —Å—É–º\n\n` +
      `üìö –í –∫—É—Ä—Å –≤—Ö–æ–¥–∏—Ç:\n` +
      `‚Ä¢ –í—Å–µ –≤–∏–¥–µ–æ —É—Ä–æ–∫–∏\n` +
      `‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è\n` +
      `‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞\n` +
      `‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`,
      keyboard
    )
  } catch (error) {
    console.error('Error in /buy command:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
})

bot.command('status', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  if (!telegramId) return

  try {
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(telegramId) },
      include: { 
        payments: {
          orderBy: { createdAt: 'desc' }
        }
      }
    })

    if (!user) {
      await ctx.reply('–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
      return
    }

    const statusIcon = user.isPaid ? '‚úÖ' : '‚ùå'
    const statusText = user.isPaid ? '–û–ø–ª–∞—á–µ–Ω' : '–ù–µ –æ–ø–ª–∞—á–µ–Ω'
    
    const lastPayment = user.payments[0]
    let paymentInfo = ''
    
    if (lastPayment) {
      const date = lastPayment.createdAt.toLocaleDateString('ru-RU')
      paymentInfo = `\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂: #${lastPayment.orderNumber}\n` +
                   `üìÖ –î–∞—Ç–∞: ${date}\n` +
                   `üí∞ –°—É–º–º–∞: ${(lastPayment.amount / 100).toLocaleString()} —Å—É–º\n` +
                   `üîñ –°—Ç–∞—Ç—É—Å: ${lastPayment.status === 'PAID' ? '‚úÖ –û–ø–ª–∞—á–µ–Ω' : lastPayment.status === 'PENDING' ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç' : '‚ùå –û—Ç–º–µ–Ω–µ–Ω'}`
    }

    await ctx.reply(
      `üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å**\n\n` +
      `üë§ –ò–º—è: ${user.fullName || user.firstName}\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `${statusIcon} –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É: ${statusText}${paymentInfo}\n\n` +
      (user.isPaid ? 'üìö –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mycourse –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º' : 'üí≥ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–∞')
    )
  } catch (error) {
    console.error('Error checking status:', error)
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.')
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É
bot.command('mycourse', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  if (!telegramId) return

  try {
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(telegramId) }
    })

    if (!user) {
      await ctx.reply('–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.')
      return
    }

    if (!user.isPaid) {
      await ctx.reply(
        '‚ùå –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n' +
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É—Ä—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n\n' +
        'üí≥ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–∞'
      )
      return
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('üì∫ –í–∏–¥–µ–æ—É—Ä–æ–∫–∏', 'https://example.com/videos')],
      [Markup.button.url('üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞', 'https://example.com/materials')],
      [Markup.button.url('üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', 'https://t.me/support_chat')],
      [Markup.button.url('üìù –ó–∞–¥–∞–Ω–∏—è', 'https://example.com/tasks')]
    ])

    await ctx.reply(
      `üéì **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å!**\n\n` +
      `‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n` +
      `üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n` +
      `‚Ä¢ –í–∏–¥–µ–æ—É—Ä–æ–∫–∏ - –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é\n` +
      `‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —à–ø–∞—Ä–≥–∞–ª–∫–∏\n` +
      `‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π\n` +
      `‚Ä¢ –ß–∞—Ç —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º –∏ –¥—Ä—É–≥–∏–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏\n` +
      `‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:`,
      keyboard
    )
  } catch (error) {
    console.error('Error in /mycourse:', error)
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫—É—Ä—Å–∞.')
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
bot.hears('üìö –ö—É–ø–∏—Ç—å –∫—É—Ä—Å', async (ctx: BotContext) => {
  const keyboard = Markup.keyboard([
    [Markup.button.contactRequest('üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞')]
  ]).resize()

  await ctx.reply(
    '–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n' +
    '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:',
    keyboard
  )
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
bot.hears('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', async (ctx: BotContext) => {
  await ctx.reply(
    'üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã Call Center:**\n\n' +
    '‚òéÔ∏è +998 78 113 60 12\n' +
    '‚òéÔ∏è +998 78 113 60 13\n\n' +
    '‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç, 9:00 - 18:00\n\n'
  )
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –∫—É—Ä—Å–µ"
bot.hears('üìã –û –∫—É—Ä—Å–µ', async (ctx: BotContext) => {
  await ctx.reply(
    'üìö **–û –∫—É—Ä—Å–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é**\n\n' +
    'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 11,000 —Å—É–º\n\n' +
    'üìù **–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫—É—Ä—Å:**\n' +
    '‚Ä¢ üìπ –í–∏–¥–µ–æ—É—Ä–æ–∫–∏ (–ø–æ–ª–Ω—ã–π –∫—É—Ä—Å)\n' +
    '‚Ä¢ üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —à–ø–∞—Ä–≥–∞–ª–∫–∏\n' +
    '‚Ä¢ ‚úçÔ∏è –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π\n' +
    '‚Ä¢ üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞\n' +
    '‚Ä¢ üéì –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏\n\n' +
    '‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –î–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞\n\n' +
    'üé∞ **–ë–æ–Ω—É—Å:** –í—Å–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤!\n\n' +
    'üìö –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ö—É–ø–∏—Ç—å –∫—É—Ä—Å"'
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
bot.on('contact', async (ctx) => {
  const contact = ctx.message.contact
  const telegramId = ctx.from?.id

  if (!contact || !telegramId) return

  try {
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.upsert({
      where: { telegramId: BigInt(telegramId) },
      update: {
        phoneNumber: contact.phone_number,
        firstName: contact.first_name,
        username: ctx.from?.username
      },
      create: {
        telegramId: BigInt(telegramId),
        phoneNumber: contact.phone_number,
        firstName: contact.first_name,
        fullName: `${contact.first_name} ${contact.last_name || ''}`.trim(),
        username: ctx.from?.username
      }
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    const mainKeyboard = Markup.keyboard([
      ['üìö –ö—É–ø–∏—Ç—å –∫—É—Ä—Å', 'üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'],
      ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', 'üìã –û –∫—É—Ä—Å–µ']
    ]).resize()

    await ctx.reply(
      `‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n` +
      `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞: ${(COURSE_PRICE / 100).toLocaleString()} —Å—É–º\n\n` +
      `üìö –í –∫—É—Ä—Å –≤—Ö–æ–¥–∏—Ç:\n` +
      `‚Ä¢ –í—Å–µ –≤–∏–¥–µ–æ —É—Ä–æ–∫–∏\n` +
      `‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è\n` +
      `‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞\n` +
      `‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏\n\n` +
      `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫—É—Ä—Å:`,
      mainKeyboard
    )

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–ø–ª–∞—Ç—ã
    const paymentKeyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Payme', 'pay_payme')]
    ])

    await ctx.reply(
      `üöÄ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ?`,
      paymentKeyboard
    )
  } catch (error) {
    console.error('Error saving contact:', error)
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞.')
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.action('pay_payme', async (ctx: BotContext) => {
  await ctx.answerCbQuery()
  
  const telegramId = ctx.from?.id
  if (!telegramId) {
    console.error('‚ùå pay_payme: telegramId –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return
  }

  try {
    console.log(`üîµ pay_payme: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è telegramId ${telegramId}`)
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(telegramId) }
    })

    console.log(`üîµ pay_payme: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:`, user ? `ID ${user.id}` : '–ù–ï–¢')

    if (!user) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start')
      return
    }

    if (!user.phoneNumber) {
      await ctx.reply('‚ùå –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "üìö –ö—É–ø–∏—Ç—å –∫—É—Ä—Å"')
      return
    }

    console.log(`üîµ pay_payme: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞, COURSE_PRICE = ${COURSE_PRICE}`)

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    const payment = await prisma.payment.create({
      data: {
        userId: user.id,
        amount: COURSE_PRICE,
        currency: 'UZS',
        status: 'PENDING'
      }
    })

    console.log(`üîµ pay_payme: –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω #${payment.orderNumber}`)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Payme Checkout
    const paymentUrl = generatePaymeCheckoutUrl(
      PAYME_MERCHANT_ID,
      {
        order_id: payment.orderNumber.toString(),
        user_id: user.id
      },
      COURSE_PRICE,
      IS_TEST_MODE
    )
    
    console.log(`üîµ pay_payme: Payme checkout URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω`)
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', paymentUrl)],
      [Markup.button.callback('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', `check_payment_${payment.id}`)]
    ])

    await ctx.reply(
      `üí≥ **–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞ —á–µ—Ä–µ–∑ Payme**\n\n` +
      `üí∞ –°—É–º–º–∞: ${(payment.amount / 100).toLocaleString()} —Å—É–º\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phoneNumber}\n` +
      `üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${payment.orderNumber}\n\n` +
      `üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Payme\n\n` +
      `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ" –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Payme.\n\n` +
      `–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∏ –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.`,
      keyboard
    )

    console.log('‚úÖ Payment created:', payment.orderNumber)
  } catch (error) {
    console.error('‚ùå Error creating payment:', error)
    if (error instanceof Error) {
      console.error('‚ùå Error details:', error.message)
      console.error('‚ùå Error stack:', error.stack)
    }
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
})

bot.action('contact_admin', async (ctx: BotContext) => {
  await ctx.answerCbQuery()
  
  await ctx.reply(
    'üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n\n' +
    '‚Ä¢ Telegram: @ibrakhimzhanovit\n' +
    '‚Ä¢ Email: support@example.com'
  )
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
bot.action(/check_payment_(.+)/, async (ctx: BotContext) => {
  await ctx.answerCbQuery()
  
  const paymentId = ctx.match![1]
  const telegramId = ctx.from?.id
  
  if (!telegramId) return

  try {
    const payment = await prisma.payment.findUnique({
      where: { id: paymentId },
      include: { user: true }
    })

    if (!payment || payment.user.telegramId !== BigInt(telegramId)) {
      await ctx.reply('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
      return
    }

    if (payment.status === 'PAID') {
      await ctx.reply(
        '‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –∞–∫—Ç–∏–≤–µ–Ω.\n\n' +
        'üìö –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mycourse –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É—Ä—Å–∞.'
      )
      return
    }

    if (payment.status === 'CANCELLED') {
      await ctx.reply(
        '‚ùå –≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /buy'
      )
      return
    }

    // –í mock —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑', `check_payment_${paymentId}`)]
    ])

    const timeElapsed = Math.floor((Date.now() - payment.createdAt.getTime()) / 1000 / 60)

    await ctx.reply(
      `‚è≥ –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ\n\n` +
      `üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${payment.orderNumber}\n` +
      `üí∞ –°—É–º–º–∞: ${(payment.amount / 100).toLocaleString()} —Å—É–º\n` +
      `‚è±Ô∏è –°–æ–∑–¥–∞–Ω: ${timeElapsed} –º–∏–Ω. –Ω–∞–∑–∞–¥\n\n` +
      `üîç –ï—Å–ª–∏ –≤—ã —É–∂–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑".\n\n` +
      `üìû –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ibrakhimzhanovit`,
      keyboard
    )

  } catch (error) {
    console.error('Error checking payment:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.')
  }
})

// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.command('admin_stats', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  
  if (!telegramId || !hasAdminAccess(telegramId)) {
    return
  }

  try {
    const totalUsers = await prisma.user.count()
    const paidUsers = await prisma.user.count({ where: { isPaid: true } })
    const totalPayments = await prisma.payment.count()
    const paidPayments = await prisma.payment.count({ where: { status: 'PAID' } })
    const pendingPayments = await prisma.payment.count({ where: { status: 'PENDING' } })
    
    // –°—á–∏—Ç–∞–µ–º –¥–æ—Ö–æ–¥
    const paidPaymentsData = await prisma.payment.findMany({
      where: { status: 'PAID' },
      select: { amount: true }
    })
    const totalRevenue = paidPaymentsData.reduce((sum, p) => sum + p.amount, 0)
    
    await ctx.reply(
      `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n` +
      `üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n` +
      `‚Ä¢ –í—Å–µ–≥–æ: ${totalUsers}\n` +
      `‚Ä¢ –û–ø–ª–∞—Ç–∏–≤—à–∏—Ö: ${paidUsers} (${Math.round(paidUsers / totalUsers * 100)}%)\n` +
      `‚Ä¢ –ù–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö: ${totalUsers - paidUsers}\n\n` +
      `üí≥ **–ü–ª–∞—Ç–µ–∂–∏:**\n` +
      `‚Ä¢ –í—Å–µ–≥–æ: ${totalPayments}\n` +
      `‚Ä¢ –û–ø–ª–∞—á–µ–Ω–æ: ${paidPayments}\n` +
      `‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${pendingPayments}\n\n` +
      `üí∞ **–î–æ—Ö–æ–¥:**\n` +
      `‚Ä¢ –û–±—â–∏–π: ${(totalRevenue / 100).toLocaleString()} —Å—É–º`
    )
  } catch (error) {
    console.error('Error getting stats:', error)
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.')
  }
})

// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
bot.action(/admin_confirm_(.+)/, async (ctx: BotContext) => {
  await ctx.answerCbQuery()
  
  const paymentId = ctx.match![1]
  const adminUsername = ctx.from?.username
  const adminUsernames = process.env.ADMIN_IDS?.split(',') || []
  
  if (!adminUsername || !adminUsernames.includes(adminUsername)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.')
    return
  }

  try {
    const payment = await prisma.payment.update({
      where: { id: paymentId },
      data: { 
        status: 'PAID',
        completedAt: new Date()
      },
      include: { user: true }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.user.update({
      where: { id: payment.userId },
      data: { isPaid: true }
    })

    await ctx.reply(`‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ó–∞–∫–∞–∑ #${payment.orderNumber}`)
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await ctx.telegram.sendMessage(
        payment.user.telegramId.toString(),
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n` +
        `‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n` +
        `üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${payment.user.id}\n` +
        `üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${payment.orderNumber}\n\n` +
        `üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.`
      )
    } catch (error) {
      console.error('Failed to notify user:', error)
    }
  } catch (error) {
    console.error('Error confirming payment:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.')
  }
})

bot.action(/admin_reject_(.+)/, async (ctx: BotContext) => {
  await ctx.answerCbQuery()
  
  const paymentId = ctx.match![1]
  const adminUsername = ctx.from?.username
  const adminUsernames = process.env.ADMIN_IDS?.split(',') || []
  
  if (!adminUsername || !adminUsernames.includes(adminUsername)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.')
    return
  }

  try {
    const payment = await prisma.payment.update({
      where: { id: paymentId },
      data: { status: 'CANCELLED' },
      include: { user: true }
    })

    await ctx.reply(`‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ó–∞–∫–∞–∑ #${payment.orderNumber}`)
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await ctx.telegram.sendMessage(
        payment.user.telegramId.toString(),
        `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n\n` +
        `üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${payment.user.id}\n` +
        `üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${payment.orderNumber}\n\n` +
        `üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ibrakhimzhanovit`
      )
    } catch (error) {
      console.error('Failed to notify user:', error)
    }
  } catch (error) {
    console.error('Error rejecting payment:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.')
  }
})

// ============ –ê–î–ú–ò–ù–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============

// –ö–Ω–æ–ø–∫–∞ "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
bot.hears('üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  if (!telegramId || !hasAdminAccess(telegramId)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.')
    return
  }
  
  await showAdminPanel(ctx)
})

// –ö–Ω–æ–ø–∫–∞ "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
bot.hears('üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  const isAdmin = telegramId ? hasAdminAccess(telegramId) : false
  
  if (isAdmin) {
    const role = getRoleText(telegramId!)
    const keyboard = Markup.keyboard([
      ['üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'],
      ['üìö –ö—É–ø–∏—Ç—å –∫—É—Ä—Å', 'üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'],
      ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', 'üìã –û –∫—É—Ä—Å–µ']
    ]).resize()
    
    await ctx.reply(
      `${role}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      keyboard
    )
  } else {
    const keyboard = Markup.keyboard([
      ['üìö –ö—É–ø–∏—Ç—å –∫—É—Ä—Å', 'üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'],
      ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', 'üìã –û –∫—É—Ä—Å–µ']
    ]).resize()
    
    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      keyboard
    )
  }
})

// –ö–Ω–æ–ø–∫–∞ "üóÇ –≠–∫—Å–ø–æ—Ä—Ç XLSX"
bot.hears('üóÇ –≠–∫—Å–ø–æ—Ä—Ç XLSX', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  if (!telegramId || !hasAdminAccess(telegramId)) return
  
  await handleExportXLSX(ctx)
})

// –ö–Ω–æ–ø–∫–∞ "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º"
bot.hears('üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  if (!telegramId || !hasAdminAccess(telegramId)) return
  
  await handleLotteryControl(ctx)
})

// –ö–Ω–æ–ø–∫–∞ "üéÅ –í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"
bot.hears('üéÅ –í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  if (!telegramId || !hasAdminAccess(telegramId)) return
  
  await handleSelectWinner(ctx)
})

// –ö–Ω–æ–ø–∫–∞ "üèÜ –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π"
bot.hears('üèÜ –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  if (!telegramId || !hasAdminAccess(telegramId)) return
  
  await handleLotteryHistory(ctx)
})

// –ö–Ω–æ–ø–∫–∞ "üßæ –ß–µ–∫ –ø–æ userId"
bot.hears('üßæ –ß–µ–∫ –ø–æ userId', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  if (!telegramId || !hasAdminAccess(telegramId)) return
  
  await handleCheckUserId(ctx)
})

// –ö–Ω–æ–ø–∫–∞ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  if (!telegramId || !hasAdminAccess(telegramId)) return

  try {
    const totalUsers = await prisma.user.count()
    const paidUsers = await prisma.user.count({ where: { isPaid: true } })
    const totalPayments = await prisma.payment.count()
    const paidPayments = await prisma.payment.count({ where: { status: 'PAID' } })
    const pendingPayments = await prisma.payment.count({ where: { status: 'PENDING' } })
    
    // –°—á–∏—Ç–∞–µ–º –¥–æ—Ö–æ–¥
    const paidPaymentsData = await prisma.payment.findMany({
      where: { status: 'PAID' },
      select: { amount: true }
    })
    const totalRevenue = paidPaymentsData.reduce((sum, p) => sum + p.amount, 0)
    
    await ctx.reply(
      `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n` +
      `üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n` +
      `‚Ä¢ –í—Å–µ–≥–æ: ${totalUsers}\n` +
      `‚Ä¢ –û–ø–ª–∞—Ç–∏–≤—à–∏—Ö: ${paidUsers} (${totalUsers > 0 ? Math.round(paidUsers / totalUsers * 100) : 0}%)\n` +
      `‚Ä¢ –ù–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö: ${totalUsers - paidUsers}\n\n` +
      `üí≥ **–ü–ª–∞—Ç–µ–∂–∏:**\n` +
      `‚Ä¢ –í—Å–µ–≥–æ: ${totalPayments}\n` +
      `‚Ä¢ –û–ø–ª–∞—á–µ–Ω–æ: ${paidPayments}\n` +
      `‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${pendingPayments}\n\n` +
      `üí∞ **–î–æ—Ö–æ–¥:**\n` +
      `‚Ä¢ –û–±—â–∏–π: ${(totalRevenue / 100).toLocaleString()} —Å—É–º`
    )
  } catch (error) {
    console.error('Error getting stats:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.')
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ UUID –¥–ª—è —á–µ–∫–∞ (–∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ß–µ–∫ –ø–æ userId")
bot.on('text', async (ctx: BotContext) => {
  if (!ctx.message || !('text' in ctx.message)) return
  
  const text = ctx.message.text
  const telegramId = ctx.from?.id
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ UUID
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i
  
  if (!uuidRegex.test(text)) return // –ù–µ UUID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  
  if (!telegramId || !hasAdminAccess(telegramId)) return // –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  
  try {
    const user = await prisma.user.findUnique({
      where: { id: text },
      include: {
        payments: {
          orderBy: { createdAt: 'desc' },
          take: 5
        }
      }
    })
    
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.')
      return
    }
    
    const { maskPhone } = await import('./admin/export-xlsx')
    const maskedPhone = maskPhone(user.phoneNumber || '')
    
    let message = `üßæ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n`
    message += `üë§ –ò–º—è: ${user.fullName || user.firstName}\n`
    message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${maskedPhone}\n`
    message += `üÜî Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`
    message += `üí≥ –°—Ç–∞—Ç—É—Å: ${user.isPaid ? '‚úÖ –û–ø–ª–∞—á–µ–Ω' : '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω'}\n`
    message += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.createdAt.toLocaleString('ru-RU')}\n\n`
    
    if (user.payments.length > 0) {
      message += `üí∞ **–ü–ª–∞—Ç–µ–∂–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):**\n\n`
      for (const payment of user.payments) {
        const statusEmoji = payment.status === 'PAID' ? '‚úÖ' : payment.status === 'PENDING' ? '‚è≥' : '‚ùå'
        message += `${statusEmoji} #${payment.orderNumber} - ${(payment.amount / 100).toLocaleString()} —Å—É–º\n`
        message += `   ${payment.createdAt.toLocaleString('ru-RU')}\n`
        if (payment.completedAt) {
          message += `   –û–ø–ª–∞—á–µ–Ω: ${payment.completedAt.toLocaleString('ru-RU')}\n`
        }
        message += `\n`
      }
    } else {
      message += `üí∞ –ü–ª–∞—Ç–µ–∂–µ–π –Ω–µ—Ç`
    }
    
    await ctx.reply(message)
  } catch (error) {
    console.error('Error checking user:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
  }
})

// Callback –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º
bot.action('lottery_start', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  if (!telegramId || !hasAdminAccess(telegramId)) {
    await ctx.answerCbQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
    return
  }
  
  await handleLotteryStart(ctx)
})

bot.action('lottery_stop', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  if (!telegramId || !hasAdminAccess(telegramId)) {
    await ctx.answerCbQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
    return
  }
  
  await handleLotteryStop(ctx)
})

bot.action('admin_panel', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  if (!telegramId || !hasAdminAccess(telegramId)) {
    await ctx.answerCbQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
    return
  }
  
  await ctx.answerCbQuery()
  
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  try {
    await ctx.deleteMessage()
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
  }
  
  await showAdminPanel(ctx)
})

bot.action('generate_random_receipt', async (ctx: BotContext) => {
  const telegramId = ctx.from?.id
  if (!telegramId || !hasAdminAccess(telegramId)) {
    await ctx.answerCbQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
    return
  }
  
  await handleGenerateRandomReceipt(ctx)
})

export { bot }
