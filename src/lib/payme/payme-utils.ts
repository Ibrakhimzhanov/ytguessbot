// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Payme

import crypto from 'crypto'

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Payme Checkout
 * @param merchantId - ID –º–µ—Ä—á–∞–Ω—Ç–∞
 * @param accountParams - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–∞ (order_id, user_id –∏ —Ç.–¥.)
 * @param amount - —Å—É–º–º–∞ –≤ —Ç–∏–π–∏–Ω–∞—Ö
 * @param isTest - —Ç–µ—Å—Ç–æ–≤—ã–π –∏–ª–∏ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º
 */
export function generatePaymeCheckoutUrl(
  merchantId: string,
  accountParams: Record<string, string>,
  amount: number,
  isTest: boolean = false
): string {
  const baseUrl = isTest
    ? 'https://checkout.test.paycom.uz'
    : 'https://checkout.paycom.uz'

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Payme: key=value;key2=value2
  // –ü—Ä–∏–º–µ—Ä: m=merchant_id;ac.order_id=123;a=500
  const parts: string[] = []
  
  // –î–æ–±–∞–≤–ª—è–µ–º merchant ID
  parts.push(`m=${merchantId}`)
  
  // –î–æ–±–∞–≤–ª—è–µ–º account –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ac.
  for (const [key, value] of Object.entries(accountParams)) {
    parts.push(`ac.${key}=${value}`)
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É
  parts.push(`a=${amount}`)
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
  const paramsString = parts.join(';')
  
  // –ö–æ–¥–∏—Ä—É–µ–º –≤ Base64
  const encoded = Buffer.from(paramsString).toString('base64')
  
  console.log('üîó Payme URL params:', paramsString)
  console.log('üîó Payme URL base64:', encoded)
  
  return `${baseUrl}/${encoded}`
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç Payme
 */
export function verifyPaymeAuth(authHeader: string | null, password: string): boolean {
  if (!authHeader || !authHeader.startsWith('Basic ')) {
    return false
  }

  const base64Credentials = authHeader.substring(6)
  const credentials = Buffer.from(base64Credentials, 'base64').toString('utf-8')
  const expectedCredentials = `Paycom:${password}`

  return credentials === expectedCredentials
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è Payme
 */
export function generateTransactionId(): string {
  return crypto.randomBytes(12).toString('hex')
}
