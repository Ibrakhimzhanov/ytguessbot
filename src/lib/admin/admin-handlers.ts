import dotenv from 'dotenv'
dotenv.config()

import { Markup } from 'telegraf'
import { BotContext } from '../telegram'
import { prisma } from '../prisma'
import { hasAdminAccess, isOwner, getRoleText } from './roles'
import { generateUsersXLSX, getXLSXFilename, maskPhone } from './export-xlsx'
import { 
  isLotteryActive, 
  startLottery, 
  stopLottery, 
  selectRandomWinner,
  saveWinner,
  getLotteryHistory,
  isLotteryLocked,
  lockLottery,
  unlockLottery 
} from './lottery'

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
 */
export async function adminMiddleware(ctx: BotContext, next: () => Promise<void>) {
  const telegramId = ctx.from?.id
  
  if (!telegramId || !hasAdminAccess(telegramId)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.')
    return
  }
  
  return next()
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
 */
export async function showAdminPanel(ctx: BotContext) {
  const telegramId = ctx.from?.id
  if (!telegramId) return
  
  const role = getRoleText(telegramId)
  const lotteryStatus = isLotteryActive() ? 'üîî –ê–∫—Ç–∏–≤–µ–Ω' : '‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
  
  const keyboard = Markup.keyboard([
    ['üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º', 'üóÇ –≠–∫—Å–ø–æ—Ä—Ç XLSX'],
    ['üéÅ –í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è', 'üèÜ –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π'],
    ['üßæ –ß–µ–∫ –ø–æ userId', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
  ]).resize()
  
  await ctx.reply(
    `üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n` +
    `üë§ –í–∞—à–∞ —Ä–æ–ª—å: ${role}\n` +
    `üé∞ –†–æ–∑—ã–≥—Ä—ã—à: ${lotteryStatus}\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    keyboard
  )
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç XLSX
 */
export async function handleExportXLSX(ctx: BotContext) {
  try {
    await ctx.reply('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é XLSX —Ñ–∞–π–ª...')
    
    const buffer = await generateUsersXLSX()
    const filename = getXLSXFilename()
    
    await ctx.replyWithDocument(
      { source: buffer, filename },
      { caption: 'üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—É—Ä—Å–∞' }
    )
    
    console.log(`‚úÖ XLSX —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${filename}`)
  } catch (error) {
    console.error('‚ùå Error exporting XLSX:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞')
  }
}

/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º
 */
export async function handleLotteryControl(ctx: BotContext) {
  const isActive = isLotteryActive()
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        isActive ? '‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à' : 'üîî –í–∫–ª—é—á–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à',
        isActive ? 'lottery_stop' : 'lottery_start'
      )
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_panel')]
  ])
  
  await ctx.reply(
    `üé∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º**\n\n` +
    `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${isActive ? 'üîî –ê–∫—Ç–∏–≤–µ–Ω' : '‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n` +
    isActive 
      ? '–†–æ–∑—ã–≥—Ä—ã—à –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.'
      : '–†–æ–∑—ã–≥—Ä—ã—à –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
    keyboard
  )
}

/**
 * –í–∫–ª—é—á–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à
 */
export async function handleLotteryStart(ctx: BotContext) {
  if (isLotteryLocked()) {
    await ctx.answerCbQuery('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...')
    return
  }
  
  const success = startLottery()
  
  if (success) {
    await ctx.answerCbQuery('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –≤–∫–ª—é—á–µ–Ω!')
    await ctx.editMessageText(
      '‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–ø–ª–∞—Ç–∏–≤—à–∏–µ –∫—É—Ä—Å, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∞—Å—Ç–≤—É—é—Ç.',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', 'lottery_stop')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_panel')]
      ])
    )
  } else {
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞')
  }
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à
 */
export async function handleLotteryStop(ctx: BotContext) {
  if (isLotteryLocked()) {
    await ctx.answerCbQuery('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...')
    return
  }
  
  const success = stopLottery()
  
  if (success) {
    await ctx.answerCbQuery('‚èπ –†–æ–∑—ã–≥—Ä—ã—à –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    await ctx.editMessageText(
      '‚èπ –†–æ–∑—ã–≥—Ä—ã—à –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n–ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
      Markup.inlineKeyboard([
        [Markup.button.callback('üîî –í–∫–ª—é—á–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', 'lottery_start')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_panel')]
      ])
    )
  } else {
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞')
  }
}

/**
 * –í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
 */
export async function handleSelectWinner(ctx: BotContext) {
  if (isLotteryLocked()) {
    await ctx.reply('‚è≥ –ò–¥–µ—Ç –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
    return
  }
  
  try {
    lockLottery()
    
    const participants = await prisma.user.findMany({
      where: { isPaid: true }
    })
    
    if (participants.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–ø–ª–∞—Ç–∏–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.')
      unlockLottery()
      return
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = await ctx.reply('üé∞ –í—ã–±–∏—Ä–∞—é –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...')
    
    // –ê–Ω–∏–º–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const animationSteps = 8
    for (let i = 0; i < animationSteps; i++) {
      await new Promise(resolve => setTimeout(resolve, 250)) // 250ms
      
      const randomParticipant = participants[Math.floor(Math.random() * participants.length)]
      const maskedPhone = maskPhone(randomParticipant.phoneNumber || '')
      
      await ctx.telegram.editMessageText(
        ctx.chat?.id,
        message.message_id,
        undefined,
        `üé∞ –í—ã–±–∏—Ä–∞—é –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...\n\n` +
        `üë§ ${randomParticipant.fullName || randomParticipant.firstName}\n` +
        `üì± ${maskedPhone}\n` +
        `üÜî @${randomParticipant.username || '–±–µ–∑ username'}`
      ).catch(() => {}) // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
    await new Promise(resolve => setTimeout(resolve, 500))
    const winner = await selectRandomWinner()
    
    if (!winner) {
      await ctx.telegram.editMessageText(
        ctx.chat?.id,
        message.message_id,
        undefined,
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è'
      )
      unlockLottery()
      return
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    await saveWinner(winner.id, '–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑')
    
    const maskedPhone = maskPhone(winner.phoneNumber || '')
    
    await ctx.telegram.editMessageText(
      ctx.chat?.id,
      message.message_id,
      undefined,
      `üéâ **–ü–û–ë–ï–î–ò–¢–ï–õ–¨ –í–´–ë–†–ê–ù!**\n\n` +
      `üë§ –ò–º—è: ${winner.fullName || winner.firstName}\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${maskedPhone}\n` +
      `üÜî Username: @${winner.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üéÅ –ü—Ä–∏–∑: –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑\n\n` +
      `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéä`
    )
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    try {
      await ctx.telegram.sendMessage(
        winner.telegramId.toString(),
        'üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n' +
        '–í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞!\n' +
        '–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—Ä—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞.'
      )
    } catch (error) {
      console.error('Failed to notify winner:', error)
    }
    
  } catch (error) {
    console.error('Error selecting winner:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è')
  } finally {
    unlockLottery()
  }
}

/**
 * –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
 */
export async function handleLotteryHistory(ctx: BotContext) {
  try {
    const history = await getLotteryHistory(10)
    
    if (history.length === 0) {
      await ctx.reply('üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø—É—Å—Ç–∞')
      return
    }
    
    let message = 'üèÜ **–ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n'
    
    for (const [index, item] of history.entries()) {
      const date = item.createdAt.toLocaleString('ru-RU')
      const winner = item.winner
      const maskedPhone = maskPhone(winner.phoneNumber || '')
      
      message += `${index + 1}. ${date}\n`
      message += `üë§ ${winner.fullName || winner.firstName}\n`
      message += `üì± ${maskedPhone}\n`
      message += `üéÅ ${item.prize}\n\n`
    }
    
    await ctx.reply(message)
  } catch (error) {
    console.error('Error fetching lottery history:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏')
  }
}

/**
 * –ß–µ–∫ –ø–æ userId
 */
export async function handleCheckUserId(ctx: BotContext) {
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π —á–µ–∫', 'generate_random_receipt')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_panel')]
  ])
  
  await ctx.reply(
    'üßæ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n' +
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ User ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n' +
    '(UUID —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: a1b2c3d4-...)\n\n' +
    '–ò–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —á–µ–∫ Payme:',
    keyboard
  )
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–µ–∫–∞
 */
export async function handleGenerateRandomReceipt(ctx: BotContext) {
  try {
    await ctx.answerCbQuery()
    
    const { generateDetailedReceipt } = await import('./receipt-generator')
    const receipt = generateDetailedReceipt()
    
    await ctx.reply(
      'üßæ **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —á–µ–∫ Payme:**\n\n' +
      '```\n' +
      receipt +
      '\n```',
      { parse_mode: 'Markdown' }
    )
  } catch (error) {
    console.error('Error generating receipt:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫–∞')
  }
}
