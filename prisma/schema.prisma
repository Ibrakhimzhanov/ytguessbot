generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid()) @db.Uuid
  telegramId  BigInt    @unique @map("telegram_id")
  username    String?   @map("username") @db.VarChar(255)
  firstName   String?   @map("first_name") @db.VarChar(255)
  phoneNumber String    @map("phone_number") @db.VarChar(20)
  fullName    String    @map("full_name") @db.VarChar(255)
  isPaid      Boolean   @default(false) @map("is_paid")
  language    String    @default("uz") @map("language") @db.VarChar(2)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  lotteryWins Lottery[]
  payments    Payment[]

  @@map("users")
}

model Payment {
  id          String        @id @default(uuid()) @db.Uuid
  userId      String        @map("user_id") @db.Uuid
  orderNumber Int           @default(autoincrement()) @map("order_number")
  amount      Int
  currency    String        @default("UZS") @db.VarChar(3)
  status      PaymentStatus @default(PENDING)
  paymeId     String?       @map("payme_id") @db.VarChar(255)
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  completedAt DateTime?     @map("completed_at") @db.Timestamptz(6)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Lottery {
  id        String   @id @default(uuid()) @db.Uuid
  winnerId  String   @map("winner_id") @db.Uuid
  prize     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  winner    User     @relation(fields: [winnerId], references: [id], onDelete: Cascade)

  @@map("lottery")
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}
