import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// –£–∑–±–µ–∫—Å–∫–∏–µ –∏–º–µ–Ω–∞
const uzbekNames = {
  male: [
    '–ê–ª–∏—à–µ—Ä', '–ê–∑–∏–∑', '–ë–æ–±—É—Ä', '–î–∞–≤–ª–∞—Ç', '–ñ–∞—Å—É—Ä', '–ó–∞—Ñ–∞—Ä', '–ò—Å–∫–∞–Ω–¥–∞—Ä',
    '–ö–∞–º–æ–ª', '–û—Ç–∞–±–µ–∫', '–†—É—Å—Ç–∞–º', '–°–∞–Ω–∂–∞—Ä', '–£–ª—É–≥–±–µ–∫', '–§–∞—Ä—Ä—É—Ö', '–®–µ—Ä–∑–æ–¥',
    '–ê–∫–±–∞—Ä', '–ë–∞—Ö—Ä–æ–º', '–î–æ—Å—Ç–æ', '–ñ–∞—Ö–æ–Ω–≥–∏—Ä', '–ò–∫—Ä–æ–º', '–ö–æ–º–∏–ª', '–ú—É—Ö–∞–º–º–∞–¥',
    '–ù–æ–¥–∏—Ä', '–†–∞–≤—à–∞–Ω', '–°–æ–±–∏—Ä', '–¢–µ–º—É—Ä', '–§–∞—Ä—Ö–æ–¥', '–≠–ª–¥–æ—Ä', '–ë–æ—Ç–∏—Ä'
  ],
  female: [
    '–ê–∑–∏–∑–∞', '–ì—É–ª–Ω–æ—Ä–∞', '–î–∏–Ω–∞—Ä–∞', '–ö–∞–º–∏–ª–∞', '–ú–∞–ª–∏–∫–∞', '–ù–∏–ª—É—Ñ–∞—Ä', '–°–∞–±–∏–Ω–∞',
    '–£–º–∏–¥–∞', '–§–µ—Ä—É–∑–∞', '–®–∞—Ö–Ω–æ–∑–∞', '–î–∏–ª–±–∞—Ä', '–ó—É–ª—Ñ–∏—è', '–õ–∞—Ç–æ—Ñ–∞—Ç', '–ú–æ—Ö–∏—Ä–∞',
    '–ù–∏–≥–æ—Ä–∞', '–û–∑–æ–¥–∞', '–°–∏—Ç–æ—Ä–∞', '–§–∞—Ä–∏–¥–∞', '–Å–∑–≥—É–ª', '–î–∏–ª–¥–æ—Ä–∞', '–ó–∞—Ä–∏–Ω–∞'
  ]
}

// –£–∑–±–µ–∫—Å–∫–∏–µ —Ñ–∞–º–∏–ª–∏–∏
const uzbekSurnames = [
  '–ö–∞—Ä–∏–º–æ–≤', '–†–∞—Ö–∏–º–æ–≤', '–£—Å–º–∞–Ω–æ–≤', '–ù–∞–±–∏–µ–≤', '–ê–ª–∏–µ–≤', '–ê–∑–∏–º–æ–≤', '–ò—Å–º–∞–∏–ª–æ–≤',
  '–Æ—Å—É–ø–æ–≤', '–°–∞–ª–∏–º–æ–≤', '–•–æ–ª–º–∞—Ç–æ–≤', '–ê–±–¥—É–ª–ª–∞–µ–≤', '–≠—Ä–≥–∞—à–µ–≤', '–î–∞–≤–ª–∞—Ç–æ–≤',
  '–ú–∞—Ö–º—É–¥–æ–≤', '–ê—Ö–º–µ–¥–æ–≤', '–°–æ–¥–∏–∫–æ–≤', '–ú–∏—Ä–∑–∞–µ–≤', '–•–∞—Å–∞–Ω–æ–≤', '–ñ—É—Ä–∞–µ–≤',
  '–°–∞–∏–¥–æ–≤', '–¢—É—Ä—Å—É–Ω–æ–≤', '–®–∞—Ä–∏–ø–æ–≤', '–¢–µ—à–∞–±–∞–µ–≤', '–†–∞–¥–∂–∞–±–æ–≤', '–ö–∞—Å—ã–º–æ–≤',
  '–§–∞–π–∑—É–ª–ª–∞–µ–≤', '–ù—É—Ä–∏–¥–¥–∏–Ω–æ–≤', '–ë–æ–±–æ–µ–≤', '–ê–∫—Ä–∞–º–æ–≤', '–ò—Å–ª–æ–º–æ–≤'
]

// –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞
const operators = ['94', '93', '55', '90', '91', '88', '78']

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
 */
function randomItem<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)]
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
function generatePhone(): string {
  const operator = randomItem(operators)
  const number = Math.floor(1000000 + Math.random() * 9000000) // 7 —Ü–∏—Ñ—Ä
  return `+998${operator}${number}`
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username
 */
function generateUsername(firstName: string, surname: string): string {
  const random = Math.floor(100 + Math.random() * 900)
  const cleanFirst = firstName.toLowerCase()
    .replace(/—ë/g, 'yo')
    .replace(/—û/g, 'u')
    .replace(/“õ/g, 'q')
    .replace(/“ì/g, 'g')
    .replace(/“≥/g, 'h')
    .replace(/[^a-z]/g, '')
  
  const cleanSurname = surname.toLowerCase()
    .replace(/—ë/g, 'yo')
    .replace(/—û/g, 'u')
    .replace(/“õ/g, 'q')
    .replace(/“ì/g, 'g')
    .replace(/“≥/g, 'h')
    .replace(/[^a-z]/g, '')
  
  return `${cleanFirst}_${cleanSurname}${random}`
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Telegram ID
 */
function generateTelegramId(): bigint {
  // Telegram ID –æ–±—ã—á–Ω–æ 9-10 —Ü–∏—Ñ—Ä
  const id = Math.floor(100000000 + Math.random() * 900000000)
  return BigInt(id)
}

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n')

  // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  console.log('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
  await prisma.payment.deleteMany({})
  await prisma.user.deleteMany({})
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã\n')

  const users = []
  const payments = []

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  for (let i = 0; i < 50; i++) {
    const isMale = Math.random() > 0.5
    const firstName = isMale 
      ? randomItem(uzbekNames.male)
      : randomItem(uzbekNames.female)
    
    const surname = randomItem(uzbekSurnames)
    const fullName = `${firstName} ${surname}`
    const phoneNumber = generatePhone()
    const username = generateUsername(firstName, surname)
    const telegramId = generateTelegramId()
    
    // 60% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–ø–ª–∞—Ç–∏–ª–∏, 40% –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏
    const isPaid = Math.random() < 0.6
    
    const user = await prisma.user.create({
      data: {
        telegramId,
        firstName,
        fullName,
        phoneNumber,
        username,
        isPaid
      }
    })
    
    users.push(user)
    
    console.log(`${i + 1}. ${isPaid ? '‚úÖ' : '‚ùå'} ${fullName} (@${username}) - ${phoneNumber}`)
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª, —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    if (isPaid) {
      const daysAgo = Math.floor(Math.random() * 30) // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
      const createdAt = new Date()
      createdAt.setDate(createdAt.getDate() - daysAgo)
      
      const completedAt = new Date(createdAt)
      completedAt.setMinutes(completedAt.getMinutes() + Math.floor(Math.random() * 30)) // –û–ø–ª–∞—á–µ–Ω —á–µ—Ä–µ–∑ 0-30 –º–∏–Ω—É—Ç
      
      const payment = await prisma.payment.create({
        data: {
          userId: user.id,
          amount: 2500000, // 25,000 —Å—É–º
          currency: 'UZS',
          status: 'PAID',
          paymeId: `mock_receipt_${Math.floor(100000 + Math.random() * 900000)}`,
          createdAt,
          completedAt
        }
      })
      
      payments.push(payment)
    }
  }

  console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')
  console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')
  console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`)
  console.log(`‚úÖ –û–ø–ª–∞—Ç–∏–≤—à–∏—Ö (—É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ): ${users.filter(u => u.isPaid).length}`)
  console.log(`‚ùå –ù–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö: ${users.filter(u => !u.isPaid).length}`)
  console.log(`üí≥ –ü–ª–∞—Ç–µ–∂–µ–π —Å–æ–∑–¥–∞–Ω–æ: ${payments.length}`)
  console.log(`üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${(payments.length * 11000).toLocaleString()} —Å—É–º`)
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')
  
  console.log('\nüé∞ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:')
  const participants = users.filter(u => u.isPaid)
  participants.forEach((user, index) => {
    console.log(`  ${index + 1}. ${user.fullName} (@${user.username})`)
  })
  
  console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!')
  console.log('\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ:')
  console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
  console.log('   2. –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
  console.log('   3. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å XLSX')
  console.log('   4. –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à —Å—Ä–µ–¥–∏ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
