// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
require('dotenv').config()

async function testDatabaseConnection() {
  console.log('üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n')
  
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Prisma
    const { PrismaClient } = require('@prisma/client')
    const prisma = new PrismaClient()
    
    console.log('‚úÖ Prisma Client –∑–∞–≥—Ä—É–∂–µ–Ω')
    
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ...')
    await prisma.$connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    
    try {
      const userCount = await prisma.user.count()
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'users' –¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–ø–∏—Å–µ–π: ${userCount}`)
    } catch (tableError) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è.')
    }
    
    try {
      const paymentCount = await prisma.payment.count()
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'payments' –¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–ø–∏—Å–µ–π: ${paymentCount}`)
    } catch (tableError) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ payments –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è.')
    }
    
    try {
      const lotteryCount = await prisma.lottery.count()
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'lottery' –¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–ø–∏—Å–µ–π: ${lotteryCount}`)
    } catch (tableError) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ lottery –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è.')
    }
    
    await prisma.$disconnect()
    
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:')
    
    if (error.code === 'ECONNREFUSED') {
      console.error('üîå PostgreSQL —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
      console.error('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É')
    } else if (error.code === 'ENOTFOUND') {
      console.error('üîç –•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω')
      console.error('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ')
    } else if (error.message.includes('password authentication failed')) {
      console.error('üîë –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
      console.error('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ DATABASE_URL')
    } else if (error.message.includes('database') && error.message.includes('does not exist')) {
      console.error('üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      console.error('üìã –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: CREATE DATABASE telegram_course_bot;')
    } else {
      console.error('üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message)
    }
    
    console.log('\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω')
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL –≤ .env')
    console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç')
    console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: npm run db:push')
  }
}

testDatabaseConnection()
